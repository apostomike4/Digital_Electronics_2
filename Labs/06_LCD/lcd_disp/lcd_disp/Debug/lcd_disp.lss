
lcd_disp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001e4  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e92  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d8  00000000  00000000  00001202  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000709  00000000  00000000  00001ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  000021e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048b  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c7  00000000  00000000  0000279f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002e66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  8e:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  96:	29 9a       	sbi	0x05, 1	; 5
  98:	85 e0       	ldi	r24, 0x05	; 5
  9a:	8a 95       	dec	r24
  9c:	f1 f7       	brne	.-4      	; 0x9a <toggle_e+0x4>
  9e:	00 00       	nop
  a0:	29 98       	cbi	0x05, 1	; 5
  a2:	08 95       	ret

000000a4 <lcd_write>:
  a4:	cf 93       	push	r28
  a6:	c8 2f       	mov	r28, r24
  a8:	66 23       	and	r22, r22
  aa:	11 f0       	breq	.+4      	; 0xb0 <lcd_write+0xc>
  ac:	28 9a       	sbi	0x05, 0	; 5
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <lcd_write+0xe>
  b0:	28 98       	cbi	0x05, 0	; 5
  b2:	54 9a       	sbi	0x0a, 4	; 10
  b4:	55 9a       	sbi	0x0a, 5	; 10
  b6:	56 9a       	sbi	0x0a, 6	; 10
  b8:	57 9a       	sbi	0x0a, 7	; 10
  ba:	5f 98       	cbi	0x0b, 7	; 11
  bc:	5e 98       	cbi	0x0b, 6	; 11
  be:	5d 98       	cbi	0x0b, 5	; 11
  c0:	5c 98       	cbi	0x0b, 4	; 11
  c2:	cc 23       	and	r28, r28
  c4:	0c f4       	brge	.+2      	; 0xc8 <lcd_write+0x24>
  c6:	5f 9a       	sbi	0x0b, 7	; 11
  c8:	c6 fd       	sbrc	r28, 6
  ca:	5e 9a       	sbi	0x0b, 6	; 11
  cc:	c5 fd       	sbrc	r28, 5
  ce:	5d 9a       	sbi	0x0b, 5	; 11
  d0:	c4 fd       	sbrc	r28, 4
  d2:	5c 9a       	sbi	0x0b, 4	; 11
  d4:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  d8:	5f 98       	cbi	0x0b, 7	; 11
  da:	5e 98       	cbi	0x0b, 6	; 11
  dc:	5d 98       	cbi	0x0b, 5	; 11
  de:	5c 98       	cbi	0x0b, 4	; 11
  e0:	c3 fd       	sbrc	r28, 3
  e2:	5f 9a       	sbi	0x0b, 7	; 11
  e4:	c2 fd       	sbrc	r28, 2
  e6:	5e 9a       	sbi	0x0b, 6	; 11
  e8:	c1 fd       	sbrc	r28, 1
  ea:	5d 9a       	sbi	0x0b, 5	; 11
  ec:	c0 fd       	sbrc	r28, 0
  ee:	5c 9a       	sbi	0x0b, 4	; 11
  f0:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
  f4:	5c 9a       	sbi	0x0b, 4	; 11
  f6:	5d 9a       	sbi	0x0b, 5	; 11
  f8:	5e 9a       	sbi	0x0b, 6	; 11
  fa:	5f 9a       	sbi	0x0b, 7	; 11
  fc:	87 eb       	ldi	r24, 0xB7	; 183
  fe:	9b e0       	ldi	r25, 0x0B	; 11
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_write+0x5c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_write+0x62>
 106:	00 00       	nop
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_command>:
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write>
 112:	08 95       	ret

00000114 <lcd_data>:
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write>
 11a:	08 95       	ret

0000011c <lcd_clrscr>:
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
 122:	08 95       	ret

00000124 <lcd_putc>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 12c:	cf 93       	push	r28
 12e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 130:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 132:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 134:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 136:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 138:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 13a:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 13c:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	99 ef       	ldi	r25, 0xF9	; 249
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_init+0x16>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_init+0x1c>
 148:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 14a:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 14c:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 14e:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 152:	8f e1       	ldi	r24, 0x1F	; 31
 154:	9e e4       	ldi	r25, 0x4E	; 78
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_init+0x2a>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_init+0x30>
 15c:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 15e:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_init+0x3a>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_init+0x40>
 16c:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 16e:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_init+0x4a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_init+0x50>
 17c:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 17e:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 180:	0e 94 4b 00 	call	0x96	; 0x96 <toggle_e>
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_init+0x5c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_init+0x62>
 18e:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 190:	88 e2       	ldi	r24, 0x28	; 40
 192:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 196:	88 e0       	ldi	r24, 0x08	; 8
 198:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 19c:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1a6:	8c 2f       	mov	r24, r28
 1a8:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
}/* lcd_init */
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <main>:
 * Returns:  none
 **********************************************************************/
    int main(void)
    {
	    // Initialize LCD display
	    lcd_init(LCD_DISP_ON);
 1b0:	8c e0       	ldi	r24, 0x0C	; 12
 1b2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_init>

	    // Set pointer to beginning of CGRAM memory
	    lcd_command(1 << LCD_CGRAM);
 1b6:	80 e4       	ldi	r24, 0x40	; 64
 1b8:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
 1bc:	c0 e0       	ldi	r28, 0x00	; 0
 1be:	d1 e0       	ldi	r29, 0x01	; 1
 1c0:	08 e0       	ldi	r16, 0x08	; 8
 1c2:	11 e0       	ldi	r17, 0x01	; 1
	    for (uint8_t i = 0; i < 8; i++)
	    {
		    // Store all new chars to memory line by line
		    lcd_data(customChar[i]);
 1c4:	89 91       	ld	r24, Y+
 1c6:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_data>
	    // Initialize LCD display
	    lcd_init(LCD_DISP_ON);

	    // Set pointer to beginning of CGRAM memory
	    lcd_command(1 << LCD_CGRAM);
	    for (uint8_t i = 0; i < 8; i++)
 1ca:	c0 17       	cp	r28, r16
 1cc:	d1 07       	cpc	r29, r17
 1ce:	d1 f7       	brne	.-12     	; 0x1c4 <main+0x14>
	    {
		    // Store all new chars to memory line by line
		    lcd_data(customChar[i]);
	    }
	    // Set DDRAM address
	    lcd_command(1 << LCD_DDRAM);
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_command>
	    
	    // Display first custom character
	    lcd_putc(0);
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	0e 94 92 00 	call	0x124	; 0x124 <lcd_putc>


    // Enables interrupts by setting the global interrupt mask
    sei();
 1dc:	78 94       	sei
 1de:	ff cf       	rjmp	.-2      	; 0x1de <main+0x2e>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
